Jenkins MCP Server
Project Overview
Name: jenkins-mcp-server
Purpose: MCP server that provides Jenkins job management tools and handles job status notifications
Tech Stack: Node.js, TypeScript, MCP Server SDK, Jenkins API
Directory Structure
jenkins-mcp-server/
├── src/
│   ├── index.ts                # MCP server entry point
│   ├── config/
│   │   ├── environment.ts      # Environment configuration
│   │   └── jenkins.ts          # Jenkins client configuration
│   ├── server/
│   │   ├── mcp-server.ts       # Main MCP server implementation
│   │   └── tools/              # MCP tool implementations
│   │       ├── trigger-job.ts  # Jenkins job trigger tool
│   │       ├── job-status.ts   # Job status checking tool
│   │       └── list-jobs.ts    # List available jobs tool
│   ├── services/
│   │   ├── jenkins-client.ts   # Jenkins API client
│   │   ├── job-tracker.ts      # Job status tracking service
│   │   └── webhook-handler.ts  # Jenkins webhook handler
│   ├── types/
│   │   ├── mcp.ts             # MCP-related types
│   │   ├── jenkins.ts         # Jenkins API types
│   │   └── webhook.ts         # Webhook payload types
│   ├── utils/
│   │   ├── logger.ts          # Logging utility
│   │   ├── validation.ts      # Parameter validation
│   │   └── error-handler.ts   # Error handling
│   └── middleware/
│       └── webhook-auth.ts     # Webhook authentication
├── tests/
│   ├── unit/
│   ├── integration/
│   └── fixtures/
├── docs/
│   ├── README.md
│   ├── MCP-TOOLS.md
│   └── JENKINS-SETUP.md
├── .env.example
├── .gitignore
├── package.json
├── tsconfig.json
├── Dockerfile
└── docker-compose.yml
Core Requirements
Dependencies
json{
  "dependencies": {
    "@modelcontextprotocol/sdk": "latest",
    "jenkins": "^1.1.0",
    "express": "^4.18.2",
    "redis": "^4.6.13",
    "winston": "^3.11.0",
    "joi": "^17.12.2",
    "dotenv": "^16.4.5",
    "axios": "^1.6.7"
  },
  "devDependencies": {
    "@types/node": "^20.11.19",
    "@types/express": "^4.17.21",
    "typescript": "^5.3.3",
    "jest": "^29.7.0",
    "@types/jest": "^29.5.12",
    "nodemon": "^3.0.3"
  }
}
Environment Variables
bash# Jenkins Configuration
JENKINS_URL=http://localhost:8080
JENKINS_USERNAME=admin
JENKINS_PASSWORD=your-jenkins-password
JENKINS_API_TOKEN=your-api-token

# MCP Server Configuration
MCP_SERVER_NAME=jenkins-mcp-server
MCP_SERVER_VERSION=1.0.0

# Webhook Configuration
WEBHOOK_PORT=3001
WEBHOOK_SECRET=your-webhook-secret

# Redis Configuration (for job tracking)
REDIS_URL=redis://localhost:6379

# Slack Webhook (for notifications)
SLACK_WEBHOOK_URL=http://slack-ai-agent:3000/jenkins/status

# Application Configuration
NODE_ENV=development
LOG_LEVEL=info
MCP Tools to Implement

trigger_jenkins_job
typescript// Input schema
{
  jobName: string;
  parameters: Record<string, any>;
  callbackInfo: {
    slackChannel: string;
    slackThreadTs: string;
    slackUserId: string;
  };
}

get_job_status
typescript// Input schema
{
  jobName: string;
  buildNumber: number;
}

list_jenkins_jobs
typescript// Input schema
{
  filter?: string;
  includeDisabled?: boolean;
}

get_job_parameters
typescript// Input schema
{
  jobName: string;
}


Core Services

Jenkins Client Service (src/services/jenkins-client.ts)

Authenticate with Jenkins API
Trigger parameterized builds
Get job and build information
Handle Jenkins API errors


Job Tracker Service (src/services/job-tracker.ts)

Store job callback information in Redis
Track job status changes
Clean up completed job data


Webhook Handler Service (src/services/webhook-handler.ts)

Receive Jenkins build notifications
Parse webhook payloads
Send status updates to Slack AI Agent
Authenticate webhook requests



Webhook Endpoints
typescriptPOST /webhook/jenkins        # Jenkins build status webhook
GET /health                  # Health check endpoint
GET /tools                   # List available MCP tools
Jenkins Configuration Requirements

Jenkins webhook plugin installed
Webhook configured for job completion notifications
API token authentication enabled
Required job parameters documented

Integration Points
Communication Flow

Slack AI Agent → Jenkins MCP Server

MCP tool calls via stdio transport
Job trigger requests with parameters
Status query requests


Jenkins → Jenkins MCP Server

Webhook notifications on job completion
Build status and details


Jenkins MCP Server → Slack AI Agent

HTTP webhook for status notifications
Job completion with results



Data Flow
User mentions bot in Slack 
→ AI extracts parameters 
→ MCP call to trigger Jenkins job 
→ Jenkins executes job 
→ Jenkins sends webhook to MCP server 
→ MCP server notifies Slack AI Agent 
→ Slack AI Agent posts update to thread
Testing Requirements
Unit Tests

MCP tool implementations
Jenkins API client methods
Webhook payload processing
Parameter validation

Integration Tests

End-to-end MCP communication
Jenkins API integration
Webhook delivery and processing
Error handling scenarios

Deployment Considerations
Docker Configuration

Multi-stage builds for production
Environment-specific configurations
Health check endpoints
Proper logging and monitoring

Security Requirements

Jenkins API token management
Webhook signature verification
Input parameter validation
Rate limiting on webhook endpoints



